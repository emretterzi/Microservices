spring.datasource.url=jdbc:postgresql://localhost:5433/order-service
spring.datasource.username=postgres
spring.datasource.password=silasener35
spring.jpa.hibernate.ddl-auto=update
server.port=8081
eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service

#Actuator :  uygulamanin saglik durumu, performans metrikleri ve yapilandirma özellikleri gibi çalisma zamani bilgilerini saglayan yönetim ve izleme kütüphanesi
# Circuit breaker saglik göstergeleri Spring Boot Actuator üzerinden etkinlestirilir.
management.health.circuitbreakers.enabled=true
# Tüm Actuator endpoint'leri web üzerinden erisilebilir hale getirilir.
management.endpoints.web.exposure.include=*
# Saglik göstergesi detaylari her zaman gösterilir.
management.endpoint.health.show-details=always

#Circuit breaker olaylari --> close -> half open - > open ,  close -> half open - > close

# Resilience4j Properties -- Circuit Breaker
# 'store' adli circuit breaker'i için saglik göstergesini actuator'e kaydeder
resilience4j.circuitbreaker.instances.store.register-health-indicator=true
# Circuit breaker olayi tüketici tampon boyutu 10 olarak ayarlanir.
resilience4j.circuitbreaker.instances.store.event-consumer-buffer-size=10
# Circuit breaker kaydirmali pencere tipi, çagri sayisina göre belirlenir.
resilience4j.circuitbreaker.instances.store.sliding-window-type=COUNT_BASED
# Kaydirmali pencere boyutu 5 çagri olarak ayarlanir.
resilience4j.circuitbreaker.instances.store.sliding-window-size=5
# Hata orani esigi %50 olarak belirlenir,yani %50'den fazla hata orani varsa circuit breaker açik duruma geçer.
resilience4j.circuitbreaker.instances.store.failure-rate-threshold=50
# Açik durumda bekleme süresi 5 saniye olarak ayarlanir.
resilience4j.circuitbreaker.instances.store.wait-duration-in-open-state=5s
# Yari açik durumda izin verilen çagri sayisi 3 olarak ayarlanir.
resilience4j.circuitbreaker.instances.store.permitted-number-of-calls-in-half-open-state=3
# Otomatik olarak açik durumdan yari açik duruma geçis etkinlestirilir.
resilience4j.circuitbreaker.instances.store.automatic-transition-from-open-to-half-open-enabled=true


# Resilience4j Timeout Properties , @TimeLimiter=>3s içinde yanit alinmalidir , alinmazsa hata firlatir
resilience4j.timelimiter.instances.store.timeout-duration=3s


# Resilience4J Retry Properties
# 'store' maksimum deneme sayisi belirtir.
resilience4j.retry.instances.store.max-attempts=3
# Bir deneme basarisiz oldugunda, bir sonraki deneme arasindaki bekleme süresini belirtir.
resilience4j.retry.instances.store.wait-duration=5s

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0


#Kafka Properties
#Spring , Kafka broker'ina baglanir
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
#Kafka üreticisinin gönderdigi key'ler, String türündedir ve  verileri byte dizilerine dönüstürerek seri hale getirir
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
## Kafka üreticisi, gönderdigi value'lar JsonSerializer kullanarak JSON formatina dönüstürerek seri hale getirir.
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#'event' Java nesnesinin 'org.example.orderservice.event.OrderPlacedEvent' Java sinifina karsilik geldigini belirtir.
#farkli uygulamalar arasinda JSON verilerinin dogru sekilde islenerek eslenmesini saglar.
spring.kafka.producer.properties.spring.json.type.mapping=event:org.example.orderservice.event.OrderPlacedEvent